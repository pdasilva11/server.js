name: Vault Secret to Mounted File in Pod

on:
  workflow_dispatch:

jobs:
  retrieve-and-deploy:
    runs-on: self-hosted

    env:
      API_URL: ${{ vars.API_URL }}
      VERIFY_CA: ${{ vars.VERIFY_CA }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      CERTIFICATE: ${{ secrets.CERTIFICATE }}
      CERTIFICATE_KEY: ${{ secrets.CERTIFICATE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Retrieve DEPLOY_KEY from BeyondTrust
        id: secretsafe
        uses: BeyondTrust/secrets-safe-action@v1
        with:
          SECRET_PATH: '{"path": "nav/docker", "output_id": "docker"}'

      - name: Debug Raw Secret Response
        run: |
          echo "Raw Secret Response:"
          echo "${{ steps.secretsafe.outputs.docker }}"

      - name: Validate and Extract Secret
        run: |
          mkdir -p /opt/tmp  # Ensure the directory exists
          secret_response="${{ steps.secretsafe.outputs.docker }}"

          # Check if secret_response is empty
          if [ -z "$secret_response" ]; then
            echo "Error: Secret response is empty!"
            exit 1
          fi

          # Validate JSON format before parsing
          echo "$secret_response" | jq empty || { echo "Invalid JSON format!"; exit 1; }

          # Extract secret value
          secret=$(echo "$secret_response" | jq -r '.value')
          echo "$secret" > /opt/tmp/secret.txt

      - name: Debug Secret Content
        run: |
          echo "Secret content:"
          cat /opt/tmp/secret.txt

      - name: Check current user and validate kubeconfig
        run: |
          whoami
          ls -l $HOME/.kube/config

      - name: Set KUBECONFIG and Verify Kubernetes Config
        run: |
          export KUBECONFIG=$HOME/.kube/config
          kubectl config view

      - name: Verify Kubernetes Secret Before Creating
        run: |
          export KUBECONFIG=$HOME/.kube/config
          if kubectl get secret vault-secret > /dev/null 2>&1; then
            echo "Kubernetes secret exists, deleting..."
            kubectl delete secret vault-secret
          else
            echo "Kubernetes secret does not exist, creating..."
          fi
          kubectl create secret generic vault-secret --from-file=secret.txt=/opt/tmp/secret.txt

      - name: Create Pod YAML with BeyondTrust container and mounted secret
        run: |
          cat <<EOF > /opt/tmp/vault-test-pod.yaml
          apiVersion: v1
          kind: Pod
          metadata:
            name: jumpoint-pod
            namespace: default
          spec:
            containers:
            - name: jumpoint-name
              image: beyondtrust/sra-jumpoint:1cd9128ba1
              env:
              - name: DEPLOY_KEY
                valueFrom:
                  secretKeyRef:
                    name: vault-secret
                    key: secret.txt
              volumeMounts:
              - name: jpt-vol
                mountPath: /jpt
              securityContext:
                capabilities:
                  add: ["IPC_LOCK"]
            volumes:
            - name: jpt-vol
              hostPath:
                path: /data
                type: Directory
          EOF

      - name: Confirm YAML file exists
        run: |
          cat /opt/tmp/vault-test-pod.yaml

      - name: Deploy Pod using kubectl
        run: |
          export KUBECONFIG=$HOME/.kube/config
          kubectl apply -f /opt/tmp/vault-test-pod.yaml
